{"version":3,"sources":["js\\CanvasImage.js","js\\PQueue.js","js\\tool.js","js\\CMap.js","js\\Histo.js","js\\VBox.js","js\\MMCQ.js","js\\ExtImgColor.js","index.js"],"names":["CanvasImage","image","canvas","document","createElement","context","getContext","body","appendChild","width","naturalWidth","height","naturalHeight","drawImage","clearRect","imageData","putImageData","getImageData","parentNode","removeChild","PQueue","comparator","contents","sorted","sort","o","push","index","undefined","length","pop","f","map","module","exports","naturalOrder","a","b","CMap","vboxes","vbox","count","volume","color","avg","vb","size","i","max","peek","contains","nearest","min","Math","pow","d2","pColor","sqrt","sigbits","rshift","getColorIndex","r","g","getHisto","pixels","histosize","histo","Array","rval","gval","bval","forEach","pixel","VBox","rmin","rmax","gmin","gmax","bmin","bmax","r1","r2","g1","g2","b1","b2","force","_volume","npix","_count_set","j","k","_count","_avg","mult","ntot","hval","rsum","gsum","bsum","histoindex","MMCQ","rw","gw","bw","maxw","copy","total","partialsum","lookaheadsum","sum","d","doCut","dim1","dim2","left","right","vbox1","vbox2","count2","maxcolors","vboxFromPixels","pq","fractByPopulations","iter","pq2","cmap","pQueue","target","maxIterations","ncolors","niters","medianCutApply","ExtImgColor","sourceImage","quality","palette","getPalette","colorCount","data","pixelCount","getPixelCount","pixelArray","offset","quantize","removeCanvas"],"mappings":";;;;;;;;;;AEAA,SAASmC,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;ACA5B,ADCE,IFDmBrC,KECXoC,IAAIC,CAAL,GAAU,CAAC,CAAX,GAAiBD,IAAIC,CAAL,GAAU,CAAV,GAAc,CAArC;AFAA,AECD,uBFDapC,KAAZ,EAAmB;AAAA,ICDAmB;AGArB,AHCE,IGDIsC,IFKJvB,MELc,CAAhB,GHCcd,KCIZc,KDJA,EAAwB;AEA1B,AHCI,AIDJ,AHA0B,IGApBwB,KJCGzD,IIDM,EJCX,EIDewD,CJCDvD,MIDlB,GJC2BC,aAAT,CAAuB,QAAvB,CAAd;AACA,SAAKC,OAAL,GAAe,KAAKH,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAf;AIAJ,AEHA,ALEI,SAAKgB,QAAL,GAAgB,EAAhB;ADGAnB,AIDJ,AHDI,SGCKyD,AHDArC,IDEIhB,ECFT,EDEA,CAAcC,ACFA,IGClB,CAAuBqD,AHDnB,CGCJ,EAA0BC,CAA1B,EJCI,AIDyBzB,CJCC,AID9B,EAAgC,GJCGnC,MAA/B;AACA,AIDF,AHDE,AIJJ,SLMSO,AIDA,AHDAY,CGCCwC,IJCN,CIDY,EJCC,EIDGH,AHDhB,GDEkBxD,ACFAmB,IGCb,EJCQ,CAAYZ,EIDIqD,CHD7B,EDEa,EIDqBJ,CJCDzD,MAAMS,AIDlC,IAAwC2B,CAA/C,OJCE;AACA,AIDH,AHDE,SDEM1B,MAAL,GAAc,KAAKT,MAAL,CAAYS,MAAZ,GAAqBV,MAAMW,aAAzC;AMNJ,IHIM0B;AACJ,AHGE,AIDJ,SJCSjC,OAAL,CAAaQ,CGHD,QHGZ,CAAuBZ,KAAvB,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,KAAKQ,KAAzC,EAAgD,KAAKE,MAArD;AQTJ,ALMgB,AHIb,AOVH,AHSA,ICHqB8D;ADIrB,SAASV,QAAT,CAAkBC,MAAlB,EAA0B,CHHjB;AEAL,ACIF,AETF,ALMI,MGGIC,GDJC1B,EFCAjB,IEDL,GAAc,ACIE,CHHhB,CAAcE,GGGQ,CHHtB,CAAmB,EGGOkC,GHHFrC,IGG1B,KDJ2B,CFCzB,SED0Be,CAAD,EAAIC,CAAJ;AAAA,AFEzB,WAAKd,EEF8B,IFEnC,GAAc,IAAd,WIFoByC,EFA4B5B,EAAEI,IAAF,AEApB0B,CFA2BzB,KAAP,CEAb,IFA8BL,EAAEI,IAAF,CAAOE,MAAP,EAA9B,EAA+CL,EAAEG,IAAF,CAAOC,KAAP,KAAiBJ,EAAEG,IAAF,CAAOE,MAAP,EAAhE,CAAV;AAAA,AIN7B,AHYE,AHHC,AIFC,KFDc,CAAd,ACMEwB,ICLEQ,IDKM,GCLC,CDKGP,KAAJ,CAAUF,ACLpB,ILGM,KIEI,CAAZ;ADLC,AHIC,AICF,ACLE,MDMAtC,ICLIgD,CLGCtE,MKHM,CLGX,AKJA,CLIaS,CICf,QJDE,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,KAAKL,KAAlC,EAAyC,KAAKE,MAA9C;AACD,AIAD,AEVF,ADKI,MDMOyD,ICJHQ,OAAO,EDGb,KCLE;ADKF,ACLE,MDMaP,ICHTQ,OAAO,CAHX,CDKF,MHDKpD,GAAG;AGCR,AEPF,ALOI,AILA,MDMmB6C,ICFfQ,CJCCxD,MIDM,EDCb,AHAE,CAAcI,IAAd,AILA,CJKmBD,CAAnB;AACA,AINA,UAKIsD,CJCCxD,MAAL,AIDW,CALX,EJMc,KEJXiB,AFIH,EDAKzB,IGJI,OHIO;AGHhB,AHIA,AICFiD,AHDC,AIPC,SDQKO,CCFDH,CFHC7B,AHIAlC,KICP,CDLE,ACKa,CDLDqB,AHIZ,CAAaV,GGJb,CAAiB,AEHjB,QLOA,CAA0BD,EICJ,OJDtB,EAAqC,CAArC,EAAwC,CAAxC;AGHEyB,AHIH,AICC4B,ACTA,UAMUC,CDGHG,GDLChC,GCKK,CDNI,ACMV,KAAYmB,ACTnB,MDSA;ADJEhB,ACKF0B,ACVA,IELiBgE,MFWD/D,CDITE,IDLEhC,ECKI,CAAN,EDLOI,GAAL,ACKUe,ACVnB,MDUA;ADPiB,AIPnB,AHeEW,ODRA,ICQOE,MAAM,CAAN,KAAYb,EGfP,ANaThC,IGEH,GHFU;AEFX,AIXa,AHgBZA,AHFA,AIFA,ICLE0E,MLOE,CAAC,CGEGzC,IHFErC,MAAV,EAAkB,EGEI6C,GHFC5C,CGEf,EAAoB6C,CHFV,GDDJ,AIGN,EAA0BC,IAA1B,CAAR;AJFA,AOde,AHiBfJ,AHFA,AIFAF,UDIMrC,AHFFA,GDDG,AKDA4C,EDIP,GJHY9D,CIGG,CAACyD,AHFFtC,AIFd,CAAe,ELCR,GAAa,AIGED,GHFtB,EDDyBhB,AIGT,AHFSgB,KGEO,CJHhC,AIGe,CCJS,CJES,EGEI,CAArC,EHFsCL,QAAL,CAAcO,MAAd,GAAuB,CAA/B;ADA1B,AIGA,AHFC,AIFEuC,GDFJ,UHIS,EIFEI,GJEGlD,GIFG,CAAN,IJEF,CAAcK,KAAd,CAAP,OIFE;AJGH,AIFG0C,eAAOG,MAAM,CAAN,QFFD,UEEN;AFDF,ACMF,ACJIF,SDIGJ,IDNE,CCMT,CCJWM,GFFGjC,GEEG,CAAN,EFFF,CAAYP,GAAZ,CAAgB,WEErB;AFFqB,ACO1B,eDPgCa,GAAGF,KAAT,MIZhB2F,MPcM,OOdOC,SAAS;AJYN,AHGvB,AOdA,AFeE7D,OFJK,CAAP,EIXM8D,GPcC,EKCEpE,GLDG/D,EOdI,EFeAqE,GLDT,AOdc+D,CPcDxH,ACEhB,AIDK,GAAcmD,IAAd,EEfO,CAAgBkE,AFeF5D,ELDvB,CAA0B,CAA1B,AKCL,ELDkC,CAA7B,EAAgC,EOdvB,EAA6B,CPcDjE,AOd5B,EAAgC8H,GPczC,EAA4C,EOdnC,CAAhB,EPcwD5H,MAAjD,CAAP;AGFD,AHGA,AOdC,ANgBA,AIDEiE,QDMJlB,EHLM,CAAC,EMhBE8E,EFeEnE,CJCC9C,EGKZmC,GGrBiB,CAAR,ANgBP,AIDgBkB,CEfhB,CNgBkB,EIDT,GJCcpD,AIDA6C,IJCL,AIDT,ECXIH,CDWiBU,IAA5B,ECXkBpC,MAAM;ACH3B,ADIC,ALYA,AIDEsC,QDMJnB,EEjBQ2C,GLYC,EKZI9D,ADWF8B,EDMXX,CHLcrC,EKZI2D,EAAL,ADWKH,GCXKtC,CLYd,AIDE,CJCYV,EIDEwC,CCXGU,ALYnB,EKZI,ALYX,CIDS,ECXsB,CAA/B,ADW8BF,IAA5B;ACXF,ALaD,QGKDf,EEjBIwC,KAAK/D,IFiBTuB,CEjBcoB,EAAL,GAAU3C,KAAK0C,EAAf,GAAoB,CAD3B;AAAA,ADaEP,QDMJf,EEjBI4C,KAAKhE,ADWE4B,KCXGiB,EAAL,ADWSV,EDMlBf,CEjBmBpB,CDWR,CFLJ,EEKkB4B,CCXDgB,EAAf,CDWE,ELHI,AMRc,CAF3B,ADa8BT,IAA5B;AFJF,AHEA,AMXA,ADcEE,UCXA4B,CNQGvG,EGFE,EEKEmE,ELHT,AMRShB,CHMGd,AHEArB,IMRE8B,ADWE6B,EFLT,CAAY/B,AGNV,CAASwD,ADWT,ELHT,AMRS,CHMF,AHEgBnF,AKGAkD,CCXDkC,CHMtB,AIXS+B,CDKA,CDWA,CCXiB9B,EAAjB,ADWqB3B,CCd9B,GNWA,AKGE,CLHiC,GObb6D,EPakBxI,MAAxC,IObkCqI,SAAS;AJY5C,AHEA,AObC,AFgBExD,UEhBE,KFgBKT,EEhBEoE,KFgBK3D,IAAP,CEhBL,ANgBC,EIAkBT,GEhBG,CFgBjB,GAAqBS,IEhB1B,AFgBF,IEhBoC2D,aAAa,CAA/C,IAAoDA,aAAa,GAArE,EAA0E;AACxEA,ADKF,ALWA,AIAC,OAZD,MJYO,KAAKpH,GMhBG,EAAb,GNgBK,CAAcO,MAArB;AMfC,ADKD,ALWD,UKXKW,KAAKC,KAAL,MAAgB,CAApB,EAAuB;ACJvB,ADKE,ADWF,UEhBI,GFgBG,ECXE,CAACD,CCLC+F,AFgBA9D,ICXIiC,ADWR,CAAShC,EFNd/B,AIVE,CDKM,CDWH,CCXE,CAAP,ADWoBgC,CEhBC,EJUd,CEMF,EAAqBC,GEhBxB,CFgBG,EAA2BC,CEhBC0D,GFgB5B,EAAiCzD,IAAjC,CEhBsC,CAA7C,AFgB8CC,EEhBE,EFgBzC,EAA6Cb,KAA7C,CAAP;AFLA,AIVEqE,ADKD,ADWF,WFNK,IAAIxF,GIVI,CJUA,CAAR,AIVF,EJUaC,MAAM,KAAKF,IAAL,EAArB,EAAkCC,IAAIC,GAAtC,EAA2CD,GAA3C,EAAgD;AAC9C,AIVD,YJUI,KAAKR,MAAL,CAAYU,AFKflB,GAAG,CELA,CAAiBgB,CAAjB,EAAoBP,IAApB,CAAyBU,QAAzB,CAAkCP,KAAlC,CAAH,EAA6C,OAAO,KAAKJ,MAAL,CAAYU,IAAZ,CAAiBF,CAAjB,EAAoBJ,KAA3B;AAC9C,AGLD,ALUA,aAAO,KDjCU3C,ACiCLsB,QAAL,CAAcU,GAAd,CAAkBD,CAAlB,CAAP;AMdA,ADKA,ALUD,AIAD,UCVM4E,MDUM3B,ECVE,ADUd,CCVE,CDUcC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoCnB,KAApC,EAA2C;AFJzC,AIVA,ADIA,ADUyC,UEdnCjE,ADKJ2G,GHKK,KAAKzD,AIVE,KDKC,EHKR,AGNP,CHMoBR,KAAb,CAAP,YIV8B2F,WAAhB,CAAd;AJWD,AIVC,ADGA,UCHMvH,ADKJ8F,YCLgB5G,GDKD,EAFjB,CCHwBgB,YAAN,EAAlB;AACA,ADEA,ADWA,SAAK+D,CEbChB,ADKJjB,CDQF,GAAUiC,EAAV,GEbejE,CDEf,QLYM,CMdmB4H,IAAzB;AACA,ADCA,ALaA,AIDA,SAAK1D,CEbC2D,ADIDlD,ALUD,CAAC,AIDL,GAAUT,EJCA1D,AIDV,ICZA,ELaA,CMdmBtB,CNcD,KMdO4I,ANcFrH,IAAL,SMdC,EAAnB;AACA,ADAA,ALcA,AIDA,SAAK0D,CCVGS,CDUR,EJCO,CIDGT,EAAV,EJCY5D,EKdZ,MLcA,EELMqB,OAAO;AACb,AITA,ADDA,ALeD,AIDC,SAAKwC,CFJD5C,AITEuG,ADEKhC,CDWX,GAAU3B,EAAV,GFJa,GGVb,CCCmB,CJSD5C,CITlB,KJSA;AACA,AITA,ADFA,ADeA,SAAK6C,CFJDhC,AGRYzB,CCDX,AFaL,GAAUyD,CEbDrC,CJSCM,AEIV,GEba,CAAR,CJSUC,CITCyF,EJSN,AGXV,CHWmB,GAAT,AITL,EJSmB,AITAlF,CJSd,AITL,CJSL,CIT2BC,CAAtB,EAAyBzB,CAAzB,EAA4BD,CAAjC,EAAoCW,IAAI6F,UAAxC,EAAoD7F,IAAIA,IAAIwF,OAA5D,EAAqE;AJUrE,AITEQ,AFaF,SAAK1D,CFJD9B,CEIJ,GAAU8B,CFJDhC,CEIT,CEbWN,GJSGO,CITC,CAAb,CJSO,CAAS,GAAT,EAAc,CAAd,CAAT;AACA,AITEO,ADCF,ADYA,SAAKK,CFJDV,AGRAiD,ECDEzC,EFaN,GAAaE,CCZDoC,CHQC,AITAyC,CDCb,EAAgB,ADYhB,CFJA,KITsB,CAAhB,CAAJ;AACAjF,ADCA,ADYH,YEbOE,CDCCjB,IAAIP,ECDEuG,GDCG/D,EAAd,EAAkBjC,ECDE,CAAhB,CAAJ,CDCuBP,KAAKyC,EAA5B,EAAgClC,GAAhC,EAAqC;AHSvC,AITEV,ADCEyE,WHQA,CITE9C,GJSEjB,CGRE,CAAN,EHQQ,AITCgG,CJST,EAAW/F,MAAM,AITC,CAAhB,CAAJ,GJSwBF,IAAL,EAArB,EAAkCC,IAAIC,GAAtC,EAA2CD,GAA3C,EAA+C;AAC7CQ,AITAnB,ADCE,YCDE4B,CJSCX,EGREqC,GHQGjC,AFxCKrC,CM+BJ2H,ADCAvG,GHQN,CACHa,CGTc6B,EAAd,EHSK5B,AIVa,ADCAoC,CCDhB,CAAJ,CJUE,CAAS/C,CGTcH,KHSR,AGTa2C,CHSnB,CGTT,EAAgCO,CHSZnD,EGTpB,EAAqC,GHSVU,IAAP,CAAYF,CAAZ,EAAeJ,KAAf,CAAqB,CAArB,CAApB,EAA6C,CAA7C,IACAU,KAAKC,GAAL,CAASX,MAAM,CAAN,IAAWJ,OAAOU,IAAP,CAAYF,CAAZ,EAAeJ,KAAf,CAAqB,CAArB,CAApB,EAA6C,CAA7C,CADA,GAEAU,KAAKC,GAAL,CAASX,MAAM,CAAN,IAAWJ,OAAOU,IAAP,CAAYF,CAAZ,EAAeJ,KAAf,CAAqB,CAArB,CAApB,EAA6C,CAA7C,CAHG,CAAL;AIRA,ADCI,iBAAKgD,IAAInD,KAAK4C,EAAd,EAAkBO,KAAKnD,KAAK6C,EAA5B,EAAgCM,GAAhC,EAAqC;AHazC,AIbA,ADCMhE,YHYH4B,AIbCnB,KJaIgB,AIbC,GJaT,AIbA,EJaa,AIbC,ADCA,KDUXkC,OAAO,cCVkBvC,CAAd,EAAiB2C,CAAjB,EAAoBC,CAApB,CAAR;AHaJvC,AIbA,ADCI0D,ALOZ7E,AIGI,OJHGC,GIGA,CAAC,GEXI,ANQZ,EEKcqB,AIbAM,AFWD0B,CJHInE,CEKT,EIbU,CDCE8C,ECDN,ANQd,AIGO,IEXkBJ,ADCCnC,ADUF2D,IEXK,CDCT,ADUhB,EEXU,AFWiB,GCVK,CCDAjD,ADCxB,ICD4B,GAA5B,CAAJ,EAAsC;AJctCmB,AIbEsF,ADCC,ADUL,aAAKvD,MFEMhD,CEFX,GEXeb,AFWA,CAAC,EFEEuB,CIbd,CAAgB,CAACY,AFWAoB,CFEV,AIbS,CJaGlC,AEFP,CFEL,AIba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","file":"index.map","sourcesContent":["export default class CanvasImage {\n  constructor(image) {\n    this.canvas = document.createElement('canvas');\n    this.context = this.canvas.getContext('2d');\n\n    document.body.appendChild(this.canvas);\n    this.width = this.canvas.width = image.naturalWidth;\n    this.height = this.canvas.height = image.naturalHeight;\n\n    this.context.drawImage(image, 0, 0, this.width, this.height);\n  }\n  clear() {\n    this.context.clearRect(0, 0, this.width, this.height);\n  }\n  update(imageData) {\n    this.context.putImageData(imageData, 0, 0);\n  }\n  getPixelCount() {\n    return this.width * this.height;\n  }\n  getImageData() {\n    return this.context.getImageData(0, 0, this.width, this.height);\n  }\n  removeCanvas() {\n    this.canvas.parentNode.removeChild(this.canvas);\n  }\n}\n","export default class PQueue {\n  constructor(comparator) {\n    this.contents = []\n    this.sorted = false\n    this.comparator = comparator\n  }\n\n  sort() {\n    this.contents.sort(this.comparator);\n    this.sorted = true;\n  }\n\n  push(o) {\n    this.contents.push(o);\n    this.sorted = false;\n  }\n\n  peek(index) {\n    if (!this.sorted) this.sort();\n    if (index === undefined) index = this.contents.length - 1;\n    return this.contents[index];\n  }\n\n  pop() {\n    if (!this.sorted) this.sort();\n    return this.contents.pop();\n  }\n\n  size() {\n    return this.contents.length;\n  }\n\n  map(f) {\n    return this.contents.map(f);\n  }\n\n  debug() {\n    if (!this.sorted) this.sort();\n    return this.contents;\n  }\n}\n\nmodule.exports = PQueue\n","function naturalOrder(a, b) {\n  return (a < b) ? -1 : ((a > b) ? 1 : 0)\n}\n\nexport {\n  naturalOrder,\n}\n","import PQueue from './PQueue'\nimport {\n  naturalOrder\n} from './tool'\n\nclass CMap {\n  constructor() {\n    this.vboxes = new PQueue((a, b) => naturalOrder(a.vbox.count() * a.vbox.volume(), b.vbox.count() * b.vbox.volume()));\n  }\n\n  push(vbox) {\n    this.vboxes.push({\n      vbox: vbox,\n      color: vbox.avg()\n    });\n  }\n\n  palette() {\n    return this.vboxes.map(vb => vb.color)\n  }\n\n  size() {\n    return this.vboxes.size();\n  }\n\n  map(color) {\n    for(let i = 0, max = this.size(); i < max; i++) {\n      if(this.vboxes.peek(i).vbox.contains(color)) return this.vboxes.peek(i).color\n    }\n\n    return this.nearest(color);\n  }\n\n  nearest(color) {\n    let vboxes = this.vboxes\n    let min = Math.pow(255, 3)\n    let d2 = Math.pow(255, 3)\n    let pColor = null\n\n    for(let i = 0, max = this.size(); i < max; i++){\n      d2 = Math.sqrt(\n        Math.pow(color[0] - vboxes.peek(i).color[0], 2) +\n        Math.pow(color[1] - vboxes.peek(i).color[1], 2) +\n        Math.pow(color[2] - vboxes.peek(i).color[2], 2)\n      )\n\n      if(d2 < min) {\n        min = d2\n        pColor = vboxes.peek(i).color\n      }\n    }\n\n    return pColor\n  }\n\n}\n\nmodule.exports = CMap\n","const sigbits = 5\nconst rshift = 8 - sigbits\n\n// get reduced-space color index for a pixel\nfunction getColorIndex(r, g, b) {\n  return (r << (2 * sigbits)) + (g << sigbits) + b;\n}\n\n// histo (1-d array, giving the number of pixels in\n// each quantized region of color space), or null on error\nfunction getHisto(pixels) {\n  const histosize = 1 << (3 * sigbits)\n\n  let histo = new Array(histosize),\n    index, rval, gval, bval;\n\n  pixels.forEach(pixel => {\n    rval = pixel[0] >> rshift;\n    gval = pixel[1] >> rshift;\n    bval = pixel[2] >> rshift;\n    index = getColorIndex(rval, gval, bval);\n    histo[index] = (histo[index] || 0) + 1;\n  })\n\n  return histo\n}\n\n\nexport {\n  sigbits,\n  rshift,\n  getHisto,\n  getColorIndex,\n}\n","import {\n  sigbits,\n  rshift,\n  getColorIndex,\n} from './Histo'\n\nexport default class VBox {\n  static vboxFromPixels(pixels, histo) {\n    let rmin = 1000000,\n        rmax = 0,\n        gmin = 1000000,\n        gmax = 0,\n        bmin = 1000000,\n        bmax = 0,\n        rval, gval, bval;\n\n    // find min/max\n    pixels.forEach(pixel => {\n      rval = pixel[0] >> rshift;\n      gval = pixel[1] >> rshift;\n      bval = pixel[2] >> rshift;\n\n      rmin = rval < rmin ? rval : rmin\n      gmin = gval < gmin ? gval : gmin\n      bmin = bval < bmin ? bval : bmin\n\n      rmax = rval > rmax ? rval : rmax\n      gmax = gval > gmax ? gval : gmax\n      bmax = bval > bmax ? bval : bmax\n    })\n\n    return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, histo)\n  }\n\n  constructor(r1, r2, g1, g2, b1, b2, histo) {\n    this.r1 = r1;\n    this.r2 = r2;\n    this.g1 = g1;\n    this.g2 = g2;\n    this.b1 = b1;\n    this.b2 = b2;\n    this.histo = histo;\n  }\n\n  volume(force) {\n    if(!this._volume || force) {\n      this._volume = (this.r2 - this.r1 + 1) * (this.g2 -this.g1 + 1) * (this.b2 - this.b1 + 1)\n    }\n    return this._volume\n  }\n\n  count(force) {\n    let index = 0, npix = 0\n\n    if(!this._count_set || force) {\n      for(let i = this.r1; i <= this.r2; i++) {\n        for(let j = this.g1; j <= this.g2; j++) {\n          for(let k = this.b1; k <= this.b2; k++) {\n            index = getColorIndex(i, j, k)\n            npix += this.histo[index] || 0\n          }\n        }\n      }\n      this._count = npix\n      this._count_set = true\n    }\n\n    return this._count\n  }\n\n  copy() {\n    return new VBox(this.r1, this.r2, this.g1, this.g2, this.b1, this.b2, this.histo)\n  }\n\n  avg(force) {\n    if (!this._avg || force) {\n      const mult = 1 << (8 - sigbits)\n\n      let ntot = 0,\n        hval = 0,\n        rsum = 0,\n        gsum = 0,\n        bsum = 0,\n        histoindex;\n\n      for (let i = this.r1; i <= this.r2; i++) {\n        for (let j = this.g1; j <= this.g2; j++) {\n          for (let k = this.b1; k <= this.b2; k++) {\n            histoindex = getColorIndex(i, j, k);\n            hval = this.histo[histoindex] || 0;\n            ntot += hval;\n            rsum += (hval * (i + 0.5) * mult);\n            gsum += (hval * (j + 0.5) * mult);\n            bsum += (hval * (k + 0.5) * mult);\n          }\n        }\n      }\n\n      if (ntot) {\n        this._avg = [~~(rsum / ntot), ~~(gsum / ntot), ~~(bsum / ntot)];\n      } else {\n        // console.log('empty box')\n\n        this._avg = [~~(mult * (this.r1 + this.r2 + 1) / 2),\n                     ~~(mult * (this.g1 + this.g2 + 1) / 2),\n                     ~~(mult * (this.b1 + this.b2 + 1) / 2)];\n      }\n    }\n\n    return this._avg;\n  }\n\n  contains(pixel) {\n    const rval = pixel[0] >> rshift\n    const gval = pixel[1] >> rshift\n    const bval = pixel[2] >> rshift\n\n    return rval >= this.r1 && rval <= this.r2 &&\n           gval >= this.g1 && gval <= this.g2 &&\n           bval >= this.b1 && bval <= this.b2\n  }\n}\n","import PQueue from './PQueue'\nimport CMap from './CMap'\nimport VBox from './VBox'\nimport {\n  naturalOrder,\n} from './tool'\nimport {\n  getHisto,\n  getColorIndex,\n} from './Histo'\n\nclass MMCQ {\n  medianCutApply(histo, vbox) {\n    const rw = vbox.r2 - vbox.r1 + 1,\n      gw = vbox.g2 - vbox.g1 + 1,\n      bw = vbox.b2 - vbox.b1 + 1,\n      maxw = Math.max(rw, gw, bw)\n\n    // only one pixel, no split\n    if (vbox.count() == 1) {\n      return [vbox.copy()];\n    }\n\n    /* Find the partial sum arrays along the selected axis. */\n    let total = 0,\n      partialsum = [],\n      lookaheadsum = [],\n      i, j, k, sum, index;\n\n    if (maxw == rw) {\n      for (i = vbox.r1; i <= vbox.r2; i++) {\n        sum = 0;\n        for (j = vbox.g1; j <= vbox.g2; j++) {\n          for (k = vbox.b1; k <= vbox.b2; k++) {\n            index = getColorIndex(i, j, k);\n            sum += (histo[index] || 0);\n          }\n        }\n        total += sum;\n        partialsum[i] = total;\n      }\n    } else if (maxw == gw) {\n      for (i = vbox.g1; i <= vbox.g2; i++) {\n        sum = 0;\n        for (j = vbox.r1; j <= vbox.r2; j++) {\n          for (k = vbox.b1; k <= vbox.b2; k++) {\n            index = getColorIndex(j, i, k);\n            sum += (histo[index] || 0);\n          }\n        }\n        total += sum;\n        partialsum[i] = total;\n      }\n    } else { /* maxw == bw */\n      for (i = vbox.b1; i <= vbox.b2; i++) {\n        sum = 0;\n        for (j = vbox.r1; j <= vbox.r2; j++) {\n          for (k = vbox.g1; k <= vbox.g2; k++) {\n            index = getColorIndex(j, k, i);\n            sum += (histo[index] || 0);\n          }\n        }\n        total += sum;\n        partialsum[i] = total;\n      }\n    }\n\n    partialsum.forEach((d, i) => {\n      lookaheadsum[i] = total - d;\n    });\n\n    function doCut(color) {\n      const dim1 = color + '1',\n        dim2 = color + '2';\n\n      let left, right, vbox1, vbox2, d2, count2 = 0;\n\n      for (i = vbox[dim1]; i <= vbox[dim2]; i++) {\n        if (partialsum[i] > total / 2) {\n          left = i - vbox[dim1];\n          right = vbox[dim2] - i;\n\n          d2 = left <= right ? Math.min(vbox[dim2] - 1, ~~(i + right / 2)) : Math.max(vbox[dim1], ~~(i - 1 - left / 2))\n\n          // avoid 0-count boxes\n          while (!partialsum[d2]) d2++;\n          count2 = lookaheadsum[d2];\n          while (!count2 && partialsum[d2 - 1]) count2 = lookaheadsum[--d2];\n\n          // set dimensions\n          vbox1 = vbox.copy();\n          vbox2 = vbox.copy();\n\n          vbox1[dim2] = d2;\n          vbox2[dim1] = vbox1[dim2] + 1;\n\n          //  console.log('vbox counts:', vbox.count(), vbox1.count(), vbox2.count());\n          return [vbox1, vbox2];\n        }\n      }\n    }\n\n    // determine the cut planes\n    return maxw == rw ? doCut('r') :\n      maxw == gw ? doCut('g') :\n      doCut('b');\n  }\n\n  quantize(pixels, maxcolors) {\n    // short-circuit\n    if (!pixels.length || maxcolors < 2 || maxcolors > 256) {\n      //  console.log('wrong number of maxcolors');\n      return false;\n    }\n\n    const histo = getHisto(pixels);\n\n    // get the beginning vbox from the colors\n    const vbox = VBox.vboxFromPixels(pixels, histo)\n\n    const pq = new PQueue((a, b) => naturalOrder(a.count(), b.count()));\n    pq.push(vbox);\n\n    const fractByPopulations = 0.75\n    // first set of colors, sorted by population\n    this.iter(histo, pq, fractByPopulations * maxcolors);\n\n    // Re-sort by the product of pixel occupancy times the size in color space.\n    const pq2 = new PQueue((a, b) => naturalOrder(a.count() * a.volume(), b.count() * b.volume()))\n\n    while (pq.size()) {\n      pq2.push(pq.pop())\n    }\n    pq2.push(vbox)\n\n    // next set - generate the median cuts using the (npix * vol) sorting.\n    this.iter(histo, pq2, maxcolors - pq2.size());\n\n    // calculate the actual colors\n    const cmap = new CMap()\n    while (pq2.size()) {\n      cmap.push(pq2.pop())\n    }\n\n    return cmap;\n  }\n\n  iter(histo, pQueue, target) {\n    const maxIterations = 1000\n\n    let ncolors = 1, niters = 0\n    /**\n     * @type {VBox}\n     */\n    let vbox;\n\n    while (niters < maxIterations) {\n      vbox = pQueue.pop();\n\n      if (!vbox.count()) {\n        pQueue.push(vbox);\n        niters++;\n        // if(pQueue.size()) continue;\n        continue\n      }\n\n      // do the cut\n      const vboxes = this.medianCutApply(histo, vbox)\n      const vbox1 = vboxes[0],\n        vbox2 = vboxes[1];\n\n      if (!vbox1) {\n        //  console.log(\"vbox1 not defined; shouldn't happen!\");\n        return;\n      }\n\n      pQueue.push(vbox1);\n\n      if (vbox2) {\n        pQueue.push(vbox2);\n        ncolors++;\n      }\n\n      if (ncolors >= target)\n        return;\n\n      if (niters++ > maxIterations) {\n        //  console.log(\"infinite loop; perhaps too few pixels!\");\n        return;\n      }\n    }\n  }\n}\n\nmodule.exports = new MMCQ()\n","import CanvasImage from './CanvasImage'\nimport MMCQ from './MMCQ'\n\nexport default class ExtImgColor {\n  constructor() { }\n\n  getColor(sourceImage, quality) {\n    const palette = this.getPalette(sourceImage, 5, quality);\n    return palette[0];\n  }\n\n  getPalette(sourceImage, colorCount, quality) {\n    if (typeof colorCount !== 'number' || colorCount < 2 || colorCount > 256) {\n      colorCount = 10;\n    }\n    if (typeof quality !== 'number' || quality < 1) {\n      quality = 10;\n    }\n\n    // Create custom CanvasImage object\n    const image = new CanvasImage(sourceImage);\n    const imageData = image.getImageData();\n    const pixels = imageData.data;\n    const pixelCount = image.getPixelCount();\n    // Store the RGB values in an array format suitable for quantize function\n    const pixelArray = [];\n    for (let i = 0, offset, r, g, b, a; i < pixelCount; i = i + quality) {\n      offset = i * 4;\n      r = pixels[offset + 0];\n      g = pixels[offset + 1];\n      b = pixels[offset + 2];\n      a = pixels[offset + 3];\n      // If pixel is mostly opaque and not white\n      if (a >= 125) {\n        if (!(r > 250 && g > 250 && b > 250)) {\n          pixelArray.push([r, g, b]);\n        }\n      }\n    }\n\n    // Send array to quantize function which clusters values\n    // using median cut algorithm\n    const cmap = MMCQ.quantize(pixelArray, colorCount);\n    const palette = cmap ? cmap.palette() : null;\n    // Clean up\n    image.removeCanvas();\n    return palette;\n  }\n}\n","import ExtImgColor from './js/ExtImgColor';\n\nexport default ExtImgColor\n\n"]}